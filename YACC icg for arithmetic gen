PROGRAM 6-INTERMEDIATE CODE GENERATOR FOR ARITHMETIC EXPRESSION

File: ic.arithemtic.l

ALPHA [A-Za-z]
DIGIT [0-9]
%%
{ALPHA}({ALPHA}|{DIGIT})* return ID;
{DIGIT}+ {yylval = atoi(yytext); return NUM; }
[\n\t] yyterminate();

. return yytext[0];
%%


File: ic.arithemtic.y

%token ID NUM

%right '='
%left '+' '-'
%left '*' '/'
%left UMINUS

%%

S:	ID{ push(); }'='{ push(); }E{ codegen_assign(); }
;

E:	E'+'{ push(); }T{ codegen(); } | E'-'{ push(); }T{ codegen(); } | T

;
T:	T'*'{ push(); }F{ codegen(); }
| T'/'{ push(); }F{ codegen(); }
| F

;
F: '('E')'

| '-'{ push(); }F{codegen_umin(); }%prec UMINUS
| ID{ push(); }
| NUM{ push(); }
;

%%

#include "lex.yy.c"
#include <ctype.h>

char st[100][10];
int top = 0;
char i_[2] = "0";
char temp[2] = "t";

int main(){
printf("Enter expresstion: ");
yyparse();
}
void push()

{
strcpy(st[++top], yytext);
}
void codegen()
{
strcpy(temp, "t");

strcat(temp, i_);

printf("%s = %s %s %s\n", temp, st[top - 2], st[top - 1], st[top]);
top -= 2;
strcpy(st[top], temp);
i_[0]++;
}

void codegen_umin()
{
strcpy(temp, "t");
strcat(temp, i_);
printf("%s = -%s\n", temp, st[top]);
top--;

strcpy(st[top], temp);
i_[0]++;

}
void codegen_assign()
{
printf("%s = %s\n", st[top - 2], st[top]);

top -= 2;
}

Lex ic_arithmetic.l
Yacc ic_arithmetic.y
Gvv y.tab.c –ll –ly
./a.out
EXPRESSION: a=(k+8)*(c-s)
